# qlf2 <- glmQLFTest(fit, contrast=my.contrasts[,grep("J1.RA.",colnames(my.contrasts))])
# res2 <- topTags(qlf2)
# noVA.p1.TTKO_minus_J1 <- makeContrasts(TTKO.noVA.p1-J1.noVA.p1, levels=design)
# res <- glmQLFTest(fit_RMoutlier, contrast=noVA.p1.TTKO_minus_J1)
#
# topTags(res)
# is.de <- decideTestsDGE(qlf.noVA.p5.TTKO_minus_J1)
# summary(is.de)
# plotMD(qlf.noVA.p5.TTKO_minus_J1, status=is.de, values=c(1,-1),
#        col=c("red","blue"), legend="topright")
# EMseq results
EMfile <- "/Volumes/bioinfomatics$/yfwang/Harry/Gosia/EMseq_July2021/ReportFromCNAG/Nov2021/repeat_mean_methylation.csv"
EMseq_res <- read.csv(EMfile)
colData_EMseq <- data.frame(SampleName = colnames(EMseq_res)[-c(1:3)])
colData_EMseq$genotype <- sub("(.+)(\\.)(.+)(\\.)(.+)","\\1",colData_EMseq$SampleName)
colData_EMseq$genotype <- sub("(.+)(\\.)(.+)","\\1",colData_EMseq$genotype)
colData_EMseq$treatment <- sub("(.+)(\\.)(\\D+)(\\.\\d$)","\\3",colData_EMseq$SampleName)
colData_EMseq$treatment <- sub("(.+)(\\.)(.+)(\\.[p|P].+)","\\3",colData_EMseq$treatment)
colData_EMseq$timepoint <- sub("(.+)(\\.)(.+)(\\.)([p|P]\\d)(.\\d)","\\5",colData_EMseq$SampleName)
colData_EMseq[colData_EMseq$timepoint=="P3",]$timepoint <- "p3"
colData_EMseq[!(colData_EMseq$timepoint %in% c("p3","p5")),]$timepoint <- "p5"
# RNAseq cpm at subfamily levels
# norm_counts_byGroup
# only keep p3 and p5
norm_countsByGroup_tp <- norm_counts_byGroup[,-grep("h$",colnames(norm_counts_byGroup))]
norm_countsByGroup_tp <- norm_countsByGroup_tp[,-grep("p1",colnames(norm_countsByGroup_tp))]
norm_countsByGroup_tp <- norm_countsByGroup_tp[,-grep("\\.VA\\.",colnames(norm_countsByGroup_tp))]
# `RA` (p5 only) and `noVA` (p3 and p5)
norm_countsByGroup_tp <- norm_countsByGroup_tp[,-grep("RA.p3",colnames(norm_countsByGroup_tp))]
norm_countsByGroup_tp <- norm_countsByGroup_tp[,-grep("noVA.p3",colnames(norm_countsByGroup_tp))]
norm_countsByGroup_tp$id4match <- paste(
norm_countsByGroup_tp$Class,norm_countsByGroup_tp$Family,norm_countsByGroup_tp$Subfamily,
sep="|"
)
norm_countsByGroup_J1 <- norm_countsByGroup_tp[,-grep("TTKO",colnames(norm_countsByGroup_tp))]
norm_countsByGroup_TTKO <- norm_countsByGroup_tp[,-grep("J1",colnames(norm_countsByGroup_tp))]
colnames(norm_countsByGroup_J1)[grep("J1",colnames(norm_countsByGroup_J1))] <- paste(
"Ave.RNAseq",
colnames(norm_countsByGroup_J1)[grep("J1",colnames(norm_countsByGroup_J1))],
sep="."
)
colnames(norm_countsByGroup_TTKO)[grep("TTKO",colnames(norm_countsByGroup_TTKO))] <- paste(
"Ave.RNAseq",
colnames(norm_countsByGroup_TTKO)[grep("TTKO",colnames(norm_countsByGroup_TTKO))],
sep="."
)
RNAseq_TE_List <- list()
RNAseq_TE_List[[1]] <- norm_countsByGroup_J1
RNAseq_TE_List[[2]] <- norm_countsByGroup_TTKO
names(RNAseq_TE_List) <- c("J1","TTKO")
colData_EMseq_tp <- colData_EMseq[colData_EMseq$treatment!="VA",]
colData_EMseq_J1 <- colData_EMseq_tp[colData_EMseq_tp$genotype=="J1",]
colData_EMseq_TTKO <- colData_EMseq_tp[colData_EMseq_tp$genotype=="TTKO",]
EMseq_colDataList <- list()
EMseq_colDataList[[1]] <- colData_EMseq_J1
EMseq_colDataList[[2]] <- colData_EMseq_TTKO
names(EMseq_colDataList) <- c("J1","TTKO")
g=1
ind_genotype <- names(EMseq_colDataList)[g]
colData_EMseq_ind <- EMseq_colDataList[[g]]
cat("  \n##",ind_genotype,"{.tabset}")
cat("  \n")
norm_countsByGroup_ind <- RNAseq_TE_List[[g]]
EMseq_res_ind <- EMseq_res[,c(1:3,which(colnames(EMseq_res) %in% colData_EMseq_ind$SampleName))]
EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("RA",colnames(EMseq_res_ind)),
grep("noVA",colnames(EMseq_res_ind)))]
EMseq_res_ind$Ave.EMseq.RA <- rowMeans(EMseq_res_ind[,grep("RA",colnames(EMseq_res_ind))])
EMseq_res_ind$Ave.EMseq.noVA <- rowMeans(EMseq_res_ind[,grep("noVA",colnames(EMseq_res_ind))])
EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("Ave",colnames(EMseq_res_ind)))]
EMseq_res_ind$id4match <- paste(
EMseq_res_ind$class,EMseq_res_ind$family,EMseq_res_ind$subfamily,
sep="|")
merged_ind_RNAseqEMseq <- merge(norm_countsByGroup_ind,EMseq_res_ind[,-c(1:3)],
by.x="id4match",by.y="id4match")
uniClass <- unique(as.character(merged_ind_RNAseqEMseq$Class))
# we remove the rep classes with "?"
uniClass <- uniClass[-grep("\\?",uniClass)]
for (c in 1:length(uniClass)){
indClass <- uniClass[c]
cat("  \n###",indClass)
cat("  \n")
subDataSet <- merged_ind_RNAseqEMseq[merged_ind_RNAseqEMseq$Class==indClass,]
subDataSet_noVA <- subDataSet[,c(1:4,grep("noVA",colnames(subDataSet)))]
subDataSet_RA <- subDataSet[,c(1:4,grep("RA",colnames(subDataSet)))]
list_RNA_EM <- list()
list_RNA_EM[[1]] <- subDataSet_noVA
list_RNA_EM[[2]] <- subDataSet_RA
names(list_RNA_EM) <- c("noVA","RA")
fulldf_4plot <- NULL
for (f in 1:length(list_RNA_EM)){
ind_subset <- list_RNA_EM[[f]]
ind_trt <- names(list_RNA_EM)[f]
# cat("  \n###",ind_trt)
# cat("  \n")
colnames(ind_subset)[grep("Ave",colnames(ind_subset))] <-
sub("(Ave.+seq)(.+)","\\1",colnames(ind_subset)[grep("Ave",colnames(ind_subset))])
ind_subset$treatment <- ind_trt
fulldf_4plot <- rbind(fulldf_4plot,ind_subset)
}
if (c==1){
showncol=6
}else{
showncol=4
}
plot_EMvsRNA <- ggplot(fulldf_4plot,aes(x=Ave.RNAseq,y=Ave.EMseq)) +
geom_point(size=0.5) +
facet_wrap(Family~treatment,ncol=showncol) +
theme_bw()
print(plot_EMvsRNA)
cat("\n")
}
head(norm_counts_)
head(norm_counts)
# RNAseq cpm at subfamily levels
# norm_counts
# only keep p3 and p5
norm_counts_tp <- norm_counts[,-grep("h$",colnames(norm_counts))]
norm_counts_tp <- norm_counts_tp[,-grep("p1",colnames(norm_counts_tp))]
norm_counts_tp <- norm_counts_tp[,-grep("\\.VA\\.",colnames(norm_counts_tp))]
head(norm_counts_tp)
head(norm_counts)
# RNAseq cpm at subfamily levels
# norm_counts
# only keep p3 and p5
norm_counts_tp <- norm_counts[,-grep("h$",colnames(norm_counts))]
head(norm_counts_tp)
# RNAseq cpm at subfamily levels
# norm_counts
# only keep p3 and p5
norm_counts_tp <- norm_counts[,-grep("h_",colnames(norm_counts))]
head(norm_counts_tp)
norm_counts_tp <- norm_counts_tp[,-grep("p1",colnames(norm_counts_tp))]
norm_counts_tp <- norm_counts_tp[,-grep("\\.VA\\.",colnames(norm_counts_tp))]
head(norm_counts_tp)
# RNAseq cpm at subfamily levels
# norm_counts
# only keep p3 and p5
norm_counts_tp <- norm_counts[,-grep("h_",colnames(norm_counts))]
norm_counts_tp <- norm_counts_tp[,-grep("p1",colnames(norm_counts_tp))]
head(norm_counts_tp)
norm_counts_tp <- norm_counts_tp[,-grep("_Rol_",colnames(norm_counts_tp))]
head(norm_counts_tp)
# `RA` (p5 only) and `noVA` (p3 and p5)
norm_counts_tp <- norm_counts_tp[,-grep("p3_RA",colnames(norm_counts_tp))]
head(norm_counts_tp)
norm_counts_tp <- norm_counts_tp[,-grep("p5_noVA",colnames(norm_counts_tp))]
head(norm_counts_tp)
# RNAseq cpm at subfamily levels
# norm_counts
# only keep p3 and p5
norm_counts_tp <- norm_counts[,-grep("h_",colnames(norm_counts))]
norm_counts_tp <- norm_counts_tp[,-grep("p1",colnames(norm_counts_tp))]
norm_counts_tp <- norm_counts_tp[,-grep("_Rol_",colnames(norm_counts_tp))]
# `RA` (p5 only) and `noVA` (p3 and p5)
norm_counts_tp <- norm_counts_tp[,-grep("p3_RA",colnames(norm_counts_tp))]
norm_counts_tp <- norm_counts_tp[,-grep("p3_noVA",colnames(norm_counts_tp))]
norm_counts_tp$id4match <- paste(
norm_counts_tp$Class,norm_counts_tp$Family,norm_counts_tp$Subfamily,
sep="|"
)
head(norm_counts_tp)
norm_counts_J1 <- norm_counts_tp[,-grep("TTKO",colnames(norm_counts_tp))]
norm_counts_TTKO <- norm_counts_tp[,-grep("J1",colnames(norm_counts_tp))]
colnames(norm_counts_J1)[grep("J1",colnames(norm_counts_J1))]
colnames(norm_counts_J1)[grep("J1",colnames(norm_counts_J1))] <- paste(
"Ave.RNAseq",
colnames(norm_counts_J1)[grep("J1",colnames(norm_counts_J1))],
sep="."
)
colnames(norm_counts_TTKO)[grep("TTKO",colnames(norm_counts_TTKO))] <- paste(
"Ave.RNAseq",
colnames(norm_counts_TTKO)[grep("TTKO",colnames(norm_counts_TTKO))],
sep="."
)
head(norm_counts_TTKO)
head(EMseq_res)
g=1
ind_genotype <- names(EMseq_colDataList)[g]
colData_EMseq_ind <- EMseq_colDataList[[g]]
cat("  \n##",ind_genotype,"{.tabset}")
cat("  \n")
norm_counts_ind <- RNAseq_indTE_List[[g]]
RNAseq_indTE_List <- list()
RNAseq_indTE_List[[1]] <- norm_counts_J1
RNAseq_indTE_List[[2]] <- norm_counts_TTKO
names(RNAseq_indTE_List) <- c("J1","TTKO")
ind_genotype <- names(EMseq_colDataList)[g]
colData_EMseq_ind <- EMseq_colDataList[[g]]
cat("  \n##",ind_genotype,"{.tabset}")
cat("  \n")
norm_counts_ind <- RNAseq_indTE_List[[g]]
norm_counts_ind <- RNAseq_indTE_List[[g]]
EMseq_res_ind <- EMseq_res[,c(1:3,which(colnames(EMseq_res) %in% colData_EMseq_ind$SampleName))]
EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("RA",colnames(EMseq_res_ind)),
grep("noVA",colnames(EMseq_res_ind)))]
head(EMseq_res_ind)
# EMseq_res_ind$Ave.EMseq.RA <- rowMeans(EMseq_res_ind[,grep("RA",colnames(EMseq_res_ind))])
# EMseq_res_ind$Ave.EMseq.noVA <- rowMeans(EMseq_res_ind[,grep("noVA",colnames(EMseq_res_ind))])
# EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("Ave",colnames(EMseq_res_ind)))]
EMseq_res_ind$id4match <- paste(
EMseq_res_ind$class,EMseq_res_ind$family,EMseq_res_ind$subfamily,
sep="|")
merged_ind_RNAseqEMseq <- merge(norm_counts_ind,EMseq_res_ind[,-c(1:3)],
by.x="id4match",by.y="id4match")
uniClass <- unique(as.character(merged_ind_RNAseqEMseq$Class))
# we remove the rep classes with "?"
uniClass <- uniClass[-grep("\\?",uniClass)]
c=1
indClass <- uniClass[c]
cat("  \n###",indClass)
cat("  \n")
subDataSet <- merged_ind_RNAseqEMseq[merged_ind_RNAseqEMseq$Class==indClass,]
head(subDataSet)
head(norm_counts_ind)
RNAseq_indTE_List <- list()
RNAseq_indTE_List[[1]] <- norm_counts_J1
RNAseq_indTE_List[[2]] <- norm_counts_TTKO
names(RNAseq_indTE_List) <- c("J1","TTKO")
ind_genotype <- names(EMseq_colDataList)[g]
colData_EMseq_ind <- EMseq_colDataList[[g]]
cat("  \n##",ind_genotype,"{.tabset}")
cat("  \n")
norm_counts_ind <- RNAseq_indTE_List[[g]]
head(norm_counts_ind)
norm_counts_J1 <- norm_counts_tp[,-grep("TTKO",colnames(norm_counts_tp))]
norm_counts_TTKO <- norm_counts_tp[,-grep("J1",colnames(norm_counts_tp))]
colnames(norm_counts_J1)[grep("J1",colnames(norm_counts_J1))] <- paste(
"RNAseq",
colnames(norm_counts_J1)[grep("J1",colnames(norm_counts_J1))],
sep="."
)
colnames(norm_counts_TTKO)[grep("TTKO",colnames(norm_counts_TTKO))] <- paste(
"RNAseq",
colnames(norm_counts_TTKO)[grep("TTKO",colnames(norm_counts_TTKO))],
sep="."
)
RNAseq_indTE_List <- list()
RNAseq_indTE_List[[1]] <- norm_counts_J1
RNAseq_indTE_List[[2]] <- norm_counts_TTKO
names(RNAseq_indTE_List) <- c("J1","TTKO")
ind_genotype <- names(EMseq_colDataList)[g]
colData_EMseq_ind <- EMseq_colDataList[[g]]
cat("  \n##",ind_genotype,"{.tabset}")
cat("  \n")
norm_counts_ind <- RNAseq_indTE_List[[g]]
head(norm_counts_ind)
norm_counts_ind <- RNAseq_indTE_List[[g]]
EMseq_res_ind <- EMseq_res[,c(1:3,which(colnames(EMseq_res) %in% colData_EMseq_ind$SampleName))]
EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("RA",colnames(EMseq_res_ind)),
grep("noVA",colnames(EMseq_res_ind)))]
head(EMseq_res_ind)
# EMseq_res_ind$Ave.EMseq.RA <- rowMeans(EMseq_res_ind[,grep("RA",colnames(EMseq_res_ind))])
# EMseq_res_ind$Ave.EMseq.noVA <- rowMeans(EMseq_res_ind[,grep("noVA",colnames(EMseq_res_ind))])
# EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("Ave",colnames(EMseq_res_ind)))]
EMseq_res_ind$id4match <- paste(
EMseq_res_ind$class,EMseq_res_ind$family,EMseq_res_ind$subfamily,
sep="|")
merged_ind_RNAseqEMseq <- merge(norm_counts_ind,EMseq_res_ind[,-c(1:3)],
by.x="id4match",by.y="id4match")
uniClass <- unique(as.character(merged_ind_RNAseqEMseq$Class))
head(merged_ind_RNAseqEMseq)
# we remove the rep classes with "?"
uniClass <- uniClass[-grep("\\?",uniClass)]
subDataSet <- merged_ind_RNAseqEMseq[merged_ind_RNAseqEMseq$Class==indClass,]
subDataSet_noVA <- subDataSet[,c(1:4,grep("noVA",colnames(subDataSet)))]
subDataSet_RA <- subDataSet[,c(1:4,grep("RA",colnames(subDataSet)))]
list_RNA_EM <- list()
list_RNA_EM[[1]] <- subDataSet_noVA
list_RNA_EM[[2]] <- subDataSet_RA
names(list_RNA_EM) <- c("noVA","RA")
f=1
ind_subset <- list_RNA_EM[[f]]
ind_trt <- names(list_RNA_EM)[f]
head(ind_subset)
ind_EMseq <- ind_subset[,-grep("RNAseq",colnames(ind_subset))]
head(ind_EMseq)
head(c(1:4,
grep("RNAseq",colnames(ind_subset))))
ind_RNAseq <- ind_subset[,c(1:4,
grep("RNAseq",colnames(ind_subset)))]
head(ind_RNAseq)
?
datatable
head(subDataSet_RA)
RNAseq_indTE_List <- list()
RNAseq_indTE_List[[1]] <- norm_counts_J1
RNAseq_indTE_List[[2]] <- norm_counts_TTKO
names(RNAseq_indTE_List) <- c("J1","TTKO")
g=1
ind_genotype <- names(EMseq_colDataList)[g]
colData_EMseq_ind <- EMseq_colDataList[[g]]
cat("  \n##",ind_genotype,"{.tabset}")
cat("  \n")
norm_counts_ind <- RNAseq_indTE_List[[g]]
EMseq_res_ind <- EMseq_res[,c(1:3,which(colnames(EMseq_res) %in% colData_EMseq_ind$SampleName))]
EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("RA",colnames(EMseq_res_ind)),
grep("noVA",colnames(EMseq_res_ind)))]
# EMseq_res_ind$Ave.EMseq.RA <- rowMeans(EMseq_res_ind[,grep("RA",colnames(EMseq_res_ind))])
# EMseq_res_ind$Ave.EMseq.noVA <- rowMeans(EMseq_res_ind[,grep("noVA",colnames(EMseq_res_ind))])
# EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("Ave",colnames(EMseq_res_ind)))]
EMseq_res_ind$id4match <- paste(
EMseq_res_ind$class,EMseq_res_ind$family,EMseq_res_ind$subfamily,
sep="|")
merged_ind_RNAseqEMseq <- merge(norm_counts_ind,EMseq_res_ind[,-c(1:3)],
by.x="id4match",by.y="id4match")
uniClass <- unique(as.character(merged_ind_RNAseqEMseq$Class))
# we remove the rep classes with "?"
uniClass <- uniClass[-grep("\\?",uniClass)]
c=1
indClass <- uniClass[c]
cat("  \n###",indClass)
cat("  \n")
subDataSet <- merged_ind_RNAseqEMseq[merged_ind_RNAseqEMseq$Class==indClass,]
head(subDataSet)
uniClass
c=2
indClass <- uniClass[c]
cat("  \n###",indClass)
cat("  \n")
subDataSet <- merged_ind_RNAseqEMseq[merged_ind_RNAseqEMseq$Class==indClass,]
head(subDataSet)
??kable
library("datatabe")
library("DT")
kable(dfExample)
library("knitr")
kable(dfExample)
library(ggplot2)
g <- ggplot(mtcars, aes(x=mpg,y=wt,col="red")) + geom_point()
# option 1
g + labs(x="Miles/(US) gallon",y="Weight (1000 lbs)",title="scatter plot")
# option 2
g + xlab("Miles/(US) gallon")+ylab("Weight (1000 lbs)") +
ggtitle("scatter plot")
# option 1
g + labs(x="Miles/(US) gallon",y="Weight (1000 lbs)",title="scatter plot")
# option 2
g + xlab("Miles/(US) gallon")+ylab("Weight (1000 lbs)") +
ggtitle("scatter plot")
library(ggplot2)
g <- ggplot(mtcars, aes(x=mpg,y=wt,col="red")) + geom_point()
# option 1
g + labs(x="Miles/(US) gallon",y="Weight (1000 lbs)",title="scatter plot - option 1")
# option 2
g + xlab("Miles/(US) gallon")+ylab("Weight (1000 lbs)") +
ggtitle("scatter plot - option 2")
# option 1
g + labs(x="Miles/(US) gallon",y="Weight (1000 lbs)",title="scatter plot - option 1")
# option 2
g + xlab("Miles/(US) gallon")+ylab("Weight (1000 lbs)") +
ggtitle("scatter plot - option 2")
library(ggplot2)
g <- ggplot(mtcars, aes(x=mpg,y=wt,col="red")) + geom_point()
# option 1
g + labs(x="Miles/(US) gallon",y="Weight (1000 lbs)",title="scatter plot - option 1")
# option 2
g + xlab("Miles/(US) gallon")+ylab("Weight (1000 lbs)") +
ggtitle("scatter plot - option 2")
library(ggplot2)
ggplot(mtcars, aes(x=mpg,y=wt,col=am))+ geom_point()
library(ggplot2)
ggplot(mtcars, aes(x=mpg,y=wt,col=as.factor(am)))+ geom_point()
allSamples <- c("sample1.txt","sample2.txt","sample3.txt","sample4.txt","sample5.txt","sample5.txt")
testSamples <- c("sample1.txt","sample5.txt")
match(testSamples,allSamples)
testSamples <- c("sample5.txt", "sample1.txt")
match(testSamples,allSamples)
testSamples
# return logical vector
Logical_winter <- grepl("Winter",episode_df_Slim$episode_name)
Logical_winter
episode_df <- read.csv("GoT_dataset/episode_data.csv")
setwd("/Users/yfwang/GitHub_project/LMS_Recap4R/course/exercise/")
episode_df <- read.csv("GoT_dataset/episode_data.csv")
episode_df <- read.csv("../GoT_dataset/episode_data.csv")
# return logical vector
Logical_winter <- grepl("Winter",episode_df_Slim$episode_name)
Logical_winter
episode_df <- read.csv("GoT_dataset/episode_data.csv")
episodeExercise_df <- read.csv("../GoT_dataset/episode_data.csv")
# return logical vector
Logical_winter <- grepl("Winter",episodeExercise_df$episode_name)
Logical_winter
# return indices
Inx_winter <- grep("Dragon",episodeExercise_df$episode_name)
Inx_winter
episodeExercise_df$Contain.Winter <- Logical_winter
## option 1 - using logical vector
episodeExercise_df_winter1 <-  episodeExercise_df[episodeExercise_df$Contain.Winter=="TRUE",]
episodeExercise_df_winter1
## option 1 - using logical vector
episodeExercise_df_winter1 <-  episodeExercise_df[episodeExercise_df$Contain.Winter=="TRUE",]
episodeExercise_df_winter1
## option 2 - using indices
episodeExercise_df_winter2 <- episodeExercise_df[Inx_winter,]
episodeExercise_df_winter2
# return indices
Inx_winter <- grep("Winter",episodeExercise_df$episode_name)
Inx_winter
episodeExercise_df$Contain.Winter <- Logical_winter
## option 1 - using logical vector
episodeExercise_df_winter1 <-  episodeExercise_df[episodeExercise_df$Contain.Winter=="TRUE",]
episodeExercise_df_winter1
## option 2 - using indices
episodeExercise_df_winter2 <- episodeExercise_df[Inx_winter,]
episodeExercise_df_winter2
# In episodeExercise_df_Slim_winter1$episode_name, replace "Dragon" with "Dolphin" but keep "Winterfell"
episodeExercise_df_Slim_winter1$newEpiName <- sub("\\sWinter"," Spring",
episodeExercise_df_Slim_winter1$episode_name)
episodeExercise_df_Slim_winter1
# In episodeExercise_df_winter1$episode_name, replace "Dragon" with "Dolphin" but keep "Winterfell"
episodeExercise_df_winter1$newEpiName <- sub("\\sWinter"," Spring",
episodeExercise_df_winter1$episode_name)
episodeExercise_df_winter1
episodeExercise_df_winter1$newEpiName2 <- sub("(\\s)(Winter)","\\1Spring",
episodeExercise_df_winter1$episode_name)
episodeExercise_df_winter1
sub("^Winter"," Spring",
episodeExercise_df_winter1$episode_name)
sub("$Winter"," Spring",
episodeExercise_df_winter1$episode_name)
sub("(^Winter)"," Spring",
episodeExercise_df_winter1$episode_name)
episodeExercise_df_winter1
sub("(^Winter)"," Spring",
episodeExercise_df_winter1$episode_name)
# In episodeExercise_df_winter1$episode_name, replace "Dragon" with "Dolphin" but keep "Winterfell"
episodeExercise_df_winter1$newEpiName <- sub("(^Winter)"," Spring",
episodeExercise_df_winter1$episode_name)
episodeExercise_df_winter1
## option 1 - using logical vector
episodeExercise_df_winter1 <-  episodeExercise_df[episodeExercise_df$Contain.Winter=="TRUE",]
episodeExercise_df_winter1
sub("(Winter$)"," Spring",
episodeExercise_df_winter1$episode_name)
sub("([Winter]$)"," Spring",
episodeExercise_df_winter1$episode_name)
sub("(r$)"," Spring",
episodeExercise_df_winter1$episode_name)
sub("^a","A",x)
x <- c("apple", "banana", "pear")
sub("^a","A",x)
sub("(W.+)(r$)"," Spring",
episodeExercise_df_winter1$episode_name)
sub("(W.+)(r)"," Spring",
episodeExercise_df_winter1$episode_name)
sub("(\")(Winter)(.+)","Spring",
episodeExercise_df_winter1$episode_name)
sub("(\")(Winter)(.+)","Spring\\3",
episodeExercise_df_winter1$episode_name)
# In episodeExercise_df_winter1$episode_name, replace "Dragon" with "Dolphin" but keep "Winterfell"
episodeExercise_df_winter1$newEpiName <- sub("(\")(Winter)(.+)","Spring\\3",
episodeExercise_df_winter1$episode_name)
episodeExercise_df_winter1
episodeExercise_df_winter2
episodeExercise_df_winter1$newEpiName <- sub("(.+)(Winter)(\")","\\1Summer\\3",
episodeExercise_df_winter1$newEpiName)
episodeExercise_df_winter1$newEpiName <- sub("(\")(Winter)(.+)","\\1Spring\\3",
episodeExercise_df_winter1$episode_name)
episodeExercise_df_winter1
sub("(\")(Winter)(\\s.+)","\\1Spring\\3",
episodeExercise_df_winter1$episode_name)
episodeExercise_df_winter1$newEpiName <- sub("(\")(Winter)(\\s.+)","\\1Spring\\3",
episodeExercise_df_winter1$episode_name)
episodeExercise_df_winter1
episodeExercise_df <- episodeExercise_df[,c(1:3)]
head(episodeExercise_df)
# return logical vector
Logical_winter <- grepl("Winter",episodeExercise_df$episode_name)
Logical_winter
# return indices
Inx_winter <- grep("Winter",episodeExercise_df$episode_name)
Inx_winter
episodeExercise_df$Contain.Winter <- Logical_winter
## option 1 - using logical vector
episodeExercise_df_winter1 <-  episodeExercise_df[episodeExercise_df$Contain.Winter=="TRUE",]
episodeExercise_df_winter1
## option 2 - using indices
episodeExercise_df_winter2 <- episodeExercise_df[Inx_winter,]
episodeExercise_df_winter2
episodeExercise_df_winter1$newEpiName <- sub("(\")(Winter)(\\s.+)","\\1Spring\\3",
episodeExercise_df_winter1$episode_name)
episodeExercise_df_winter1
episodeExercise_df_winter1$newEpiName <- sub("(.+\\s)(Winter)(\")","\\1Summer\\3",
episodeExercise_df_winter1$newEpiName)
episodeExercise_df_winter1
episodeExercise_df <- read.csv("GoT_dataset/episode_data.csv")
head(episodeExercise_df)
setwd("/Users/yfwang/GitHub_project/LMS_Recap4R/course/exercise/")
episodeExercise_df <- read.csv("../GoT_dataset/episode_data.csv")
head(episodeExercise_df)
# make it slimmer
episodeExercise_df <- episodeExercise_df[,c(1:3)]
# return logical vector
Logical_winter <- grepl("Winter",episodeExercise_df$episode_name)
Logical_winter
# return indices
Inx_winter <- grep("Winter",episodeExercise_df$episode_name)
Inx_winter
episodeExercise_df$Contain.Winter <- Logical_winter
## option 1 - using logical vector
episodeExercise_df_winter1 <-  episodeExercise_df[episodeExercise_df$Contain.Winter=="TRUE",]
episodeExercise_df_winter1
## option 2 - using indices
episodeExercise_df_winter2 <- episodeExercise_df[Inx_winter,]
episodeExercise_df_winter2
episodeExercise_df_winter1$newEpiName <- sub("(\")(Winter)(\\s.+)","\\1Spring\\3",
episodeExercise_df_winter1$episode_name)
episodeExercise_df_winter1
episodeExercise_df_winter1$newEpiName <- sub("(.+\\s)(Winter)(\")","\\1Summer\\3",
episodeExercise_df_winter1$newEpiName)
episodeExercise_df_winter1
