merged_ind_RNAseqEMseq <- merge(norm_countsByGroup_ind,EMseq_res_ind[,-c(1:3)],
by.x="id4match",by.y="id4match")
uniClass <- unique(as.character(merged_ind_RNAseqEMseq$Class))
# we remove the rep classes with "?"
uniClass <- uniClass[-grep("\\?",uniClass)]
for (c in 1:length(uniClass)){
indClass <- uniClass[c]
cat("  \n###",indClass)
cat("  \n")
subDataSet <- merged_ind_RNAseqEMseq[merged_ind_RNAseqEMseq$Class==indClass,]
subDataSet_noVA <- subDataSet[,c(1:4,grep("noVA",colnames(subDataSet)))]
subDataSet_RA <- subDataSet[,c(1:4,grep("RA",colnames(subDataSet)))]
list_RNA_EM <- list()
list_RNA_EM[[1]] <- subDataSet_noVA
list_RNA_EM[[2]] <- subDataSet_RA
names(list_RNA_EM) <- c("noVA","RA")
fulldf_4plot <- NULL
for (f in 1:length(list_RNA_EM)){
ind_subset <- list_RNA_EM[[f]]
ind_trt <- names(list_RNA_EM)[f]
# cat("  \n###",ind_trt)
# cat("  \n")
colnames(ind_subset)[grep("Ave",colnames(ind_subset))] <-
sub("(Ave.+seq)(.+)","\\1",colnames(ind_subset)[grep("Ave",colnames(ind_subset))])
ind_subset$treatment <- ind_trt
fulldf_4plot <- rbind(fulldf_4plot,ind_subset)
}
if (c==1){
showncol=6
}else{
showncol=4
}
plot_EMvsRNA <- ggplot(fulldf_4plot,aes(x=Ave.RNAseq,y=Ave.EMseq)) +
geom_point(size=0.5) +
facet_wrap(Family~treatment,ncol=showncol) +
theme_bw()
print(plot_EMvsRNA)
cat("\n")
}
head(norm_counts_)
head(norm_counts)
# RNAseq cpm at subfamily levels
# norm_counts
# only keep p3 and p5
norm_counts_tp <- norm_counts[,-grep("h$",colnames(norm_counts))]
norm_counts_tp <- norm_counts_tp[,-grep("p1",colnames(norm_counts_tp))]
norm_counts_tp <- norm_counts_tp[,-grep("\\.VA\\.",colnames(norm_counts_tp))]
head(norm_counts_tp)
head(norm_counts)
# RNAseq cpm at subfamily levels
# norm_counts
# only keep p3 and p5
norm_counts_tp <- norm_counts[,-grep("h$",colnames(norm_counts))]
head(norm_counts_tp)
# RNAseq cpm at subfamily levels
# norm_counts
# only keep p3 and p5
norm_counts_tp <- norm_counts[,-grep("h_",colnames(norm_counts))]
head(norm_counts_tp)
norm_counts_tp <- norm_counts_tp[,-grep("p1",colnames(norm_counts_tp))]
norm_counts_tp <- norm_counts_tp[,-grep("\\.VA\\.",colnames(norm_counts_tp))]
head(norm_counts_tp)
# RNAseq cpm at subfamily levels
# norm_counts
# only keep p3 and p5
norm_counts_tp <- norm_counts[,-grep("h_",colnames(norm_counts))]
norm_counts_tp <- norm_counts_tp[,-grep("p1",colnames(norm_counts_tp))]
head(norm_counts_tp)
norm_counts_tp <- norm_counts_tp[,-grep("_Rol_",colnames(norm_counts_tp))]
head(norm_counts_tp)
# `RA` (p5 only) and `noVA` (p3 and p5)
norm_counts_tp <- norm_counts_tp[,-grep("p3_RA",colnames(norm_counts_tp))]
head(norm_counts_tp)
norm_counts_tp <- norm_counts_tp[,-grep("p5_noVA",colnames(norm_counts_tp))]
head(norm_counts_tp)
# RNAseq cpm at subfamily levels
# norm_counts
# only keep p3 and p5
norm_counts_tp <- norm_counts[,-grep("h_",colnames(norm_counts))]
norm_counts_tp <- norm_counts_tp[,-grep("p1",colnames(norm_counts_tp))]
norm_counts_tp <- norm_counts_tp[,-grep("_Rol_",colnames(norm_counts_tp))]
# `RA` (p5 only) and `noVA` (p3 and p5)
norm_counts_tp <- norm_counts_tp[,-grep("p3_RA",colnames(norm_counts_tp))]
norm_counts_tp <- norm_counts_tp[,-grep("p3_noVA",colnames(norm_counts_tp))]
norm_counts_tp$id4match <- paste(
norm_counts_tp$Class,norm_counts_tp$Family,norm_counts_tp$Subfamily,
sep="|"
)
head(norm_counts_tp)
norm_counts_J1 <- norm_counts_tp[,-grep("TTKO",colnames(norm_counts_tp))]
norm_counts_TTKO <- norm_counts_tp[,-grep("J1",colnames(norm_counts_tp))]
colnames(norm_counts_J1)[grep("J1",colnames(norm_counts_J1))]
colnames(norm_counts_J1)[grep("J1",colnames(norm_counts_J1))] <- paste(
"Ave.RNAseq",
colnames(norm_counts_J1)[grep("J1",colnames(norm_counts_J1))],
sep="."
)
colnames(norm_counts_TTKO)[grep("TTKO",colnames(norm_counts_TTKO))] <- paste(
"Ave.RNAseq",
colnames(norm_counts_TTKO)[grep("TTKO",colnames(norm_counts_TTKO))],
sep="."
)
head(norm_counts_TTKO)
head(EMseq_res)
g=1
ind_genotype <- names(EMseq_colDataList)[g]
colData_EMseq_ind <- EMseq_colDataList[[g]]
cat("  \n##",ind_genotype,"{.tabset}")
cat("  \n")
norm_counts_ind <- RNAseq_indTE_List[[g]]
RNAseq_indTE_List <- list()
RNAseq_indTE_List[[1]] <- norm_counts_J1
RNAseq_indTE_List[[2]] <- norm_counts_TTKO
names(RNAseq_indTE_List) <- c("J1","TTKO")
ind_genotype <- names(EMseq_colDataList)[g]
colData_EMseq_ind <- EMseq_colDataList[[g]]
cat("  \n##",ind_genotype,"{.tabset}")
cat("  \n")
norm_counts_ind <- RNAseq_indTE_List[[g]]
norm_counts_ind <- RNAseq_indTE_List[[g]]
EMseq_res_ind <- EMseq_res[,c(1:3,which(colnames(EMseq_res) %in% colData_EMseq_ind$SampleName))]
EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("RA",colnames(EMseq_res_ind)),
grep("noVA",colnames(EMseq_res_ind)))]
head(EMseq_res_ind)
# EMseq_res_ind$Ave.EMseq.RA <- rowMeans(EMseq_res_ind[,grep("RA",colnames(EMseq_res_ind))])
# EMseq_res_ind$Ave.EMseq.noVA <- rowMeans(EMseq_res_ind[,grep("noVA",colnames(EMseq_res_ind))])
# EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("Ave",colnames(EMseq_res_ind)))]
EMseq_res_ind$id4match <- paste(
EMseq_res_ind$class,EMseq_res_ind$family,EMseq_res_ind$subfamily,
sep="|")
merged_ind_RNAseqEMseq <- merge(norm_counts_ind,EMseq_res_ind[,-c(1:3)],
by.x="id4match",by.y="id4match")
uniClass <- unique(as.character(merged_ind_RNAseqEMseq$Class))
# we remove the rep classes with "?"
uniClass <- uniClass[-grep("\\?",uniClass)]
c=1
indClass <- uniClass[c]
cat("  \n###",indClass)
cat("  \n")
subDataSet <- merged_ind_RNAseqEMseq[merged_ind_RNAseqEMseq$Class==indClass,]
head(subDataSet)
head(norm_counts_ind)
RNAseq_indTE_List <- list()
RNAseq_indTE_List[[1]] <- norm_counts_J1
RNAseq_indTE_List[[2]] <- norm_counts_TTKO
names(RNAseq_indTE_List) <- c("J1","TTKO")
ind_genotype <- names(EMseq_colDataList)[g]
colData_EMseq_ind <- EMseq_colDataList[[g]]
cat("  \n##",ind_genotype,"{.tabset}")
cat("  \n")
norm_counts_ind <- RNAseq_indTE_List[[g]]
head(norm_counts_ind)
norm_counts_J1 <- norm_counts_tp[,-grep("TTKO",colnames(norm_counts_tp))]
norm_counts_TTKO <- norm_counts_tp[,-grep("J1",colnames(norm_counts_tp))]
colnames(norm_counts_J1)[grep("J1",colnames(norm_counts_J1))] <- paste(
"RNAseq",
colnames(norm_counts_J1)[grep("J1",colnames(norm_counts_J1))],
sep="."
)
colnames(norm_counts_TTKO)[grep("TTKO",colnames(norm_counts_TTKO))] <- paste(
"RNAseq",
colnames(norm_counts_TTKO)[grep("TTKO",colnames(norm_counts_TTKO))],
sep="."
)
RNAseq_indTE_List <- list()
RNAseq_indTE_List[[1]] <- norm_counts_J1
RNAseq_indTE_List[[2]] <- norm_counts_TTKO
names(RNAseq_indTE_List) <- c("J1","TTKO")
ind_genotype <- names(EMseq_colDataList)[g]
colData_EMseq_ind <- EMseq_colDataList[[g]]
cat("  \n##",ind_genotype,"{.tabset}")
cat("  \n")
norm_counts_ind <- RNAseq_indTE_List[[g]]
head(norm_counts_ind)
norm_counts_ind <- RNAseq_indTE_List[[g]]
EMseq_res_ind <- EMseq_res[,c(1:3,which(colnames(EMseq_res) %in% colData_EMseq_ind$SampleName))]
EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("RA",colnames(EMseq_res_ind)),
grep("noVA",colnames(EMseq_res_ind)))]
head(EMseq_res_ind)
# EMseq_res_ind$Ave.EMseq.RA <- rowMeans(EMseq_res_ind[,grep("RA",colnames(EMseq_res_ind))])
# EMseq_res_ind$Ave.EMseq.noVA <- rowMeans(EMseq_res_ind[,grep("noVA",colnames(EMseq_res_ind))])
# EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("Ave",colnames(EMseq_res_ind)))]
EMseq_res_ind$id4match <- paste(
EMseq_res_ind$class,EMseq_res_ind$family,EMseq_res_ind$subfamily,
sep="|")
merged_ind_RNAseqEMseq <- merge(norm_counts_ind,EMseq_res_ind[,-c(1:3)],
by.x="id4match",by.y="id4match")
uniClass <- unique(as.character(merged_ind_RNAseqEMseq$Class))
head(merged_ind_RNAseqEMseq)
# we remove the rep classes with "?"
uniClass <- uniClass[-grep("\\?",uniClass)]
subDataSet <- merged_ind_RNAseqEMseq[merged_ind_RNAseqEMseq$Class==indClass,]
subDataSet_noVA <- subDataSet[,c(1:4,grep("noVA",colnames(subDataSet)))]
subDataSet_RA <- subDataSet[,c(1:4,grep("RA",colnames(subDataSet)))]
list_RNA_EM <- list()
list_RNA_EM[[1]] <- subDataSet_noVA
list_RNA_EM[[2]] <- subDataSet_RA
names(list_RNA_EM) <- c("noVA","RA")
f=1
ind_subset <- list_RNA_EM[[f]]
ind_trt <- names(list_RNA_EM)[f]
head(ind_subset)
ind_EMseq <- ind_subset[,-grep("RNAseq",colnames(ind_subset))]
head(ind_EMseq)
head(c(1:4,
grep("RNAseq",colnames(ind_subset))))
ind_RNAseq <- ind_subset[,c(1:4,
grep("RNAseq",colnames(ind_subset)))]
head(ind_RNAseq)
?
datatable
head(subDataSet_RA)
RNAseq_indTE_List <- list()
RNAseq_indTE_List[[1]] <- norm_counts_J1
RNAseq_indTE_List[[2]] <- norm_counts_TTKO
names(RNAseq_indTE_List) <- c("J1","TTKO")
g=1
ind_genotype <- names(EMseq_colDataList)[g]
colData_EMseq_ind <- EMseq_colDataList[[g]]
cat("  \n##",ind_genotype,"{.tabset}")
cat("  \n")
norm_counts_ind <- RNAseq_indTE_List[[g]]
EMseq_res_ind <- EMseq_res[,c(1:3,which(colnames(EMseq_res) %in% colData_EMseq_ind$SampleName))]
EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("RA",colnames(EMseq_res_ind)),
grep("noVA",colnames(EMseq_res_ind)))]
# EMseq_res_ind$Ave.EMseq.RA <- rowMeans(EMseq_res_ind[,grep("RA",colnames(EMseq_res_ind))])
# EMseq_res_ind$Ave.EMseq.noVA <- rowMeans(EMseq_res_ind[,grep("noVA",colnames(EMseq_res_ind))])
# EMseq_res_ind <- EMseq_res_ind[,c(1:3,grep("Ave",colnames(EMseq_res_ind)))]
EMseq_res_ind$id4match <- paste(
EMseq_res_ind$class,EMseq_res_ind$family,EMseq_res_ind$subfamily,
sep="|")
merged_ind_RNAseqEMseq <- merge(norm_counts_ind,EMseq_res_ind[,-c(1:3)],
by.x="id4match",by.y="id4match")
uniClass <- unique(as.character(merged_ind_RNAseqEMseq$Class))
# we remove the rep classes with "?"
uniClass <- uniClass[-grep("\\?",uniClass)]
c=1
indClass <- uniClass[c]
cat("  \n###",indClass)
cat("  \n")
subDataSet <- merged_ind_RNAseqEMseq[merged_ind_RNAseqEMseq$Class==indClass,]
head(subDataSet)
uniClass
c=2
indClass <- uniClass[c]
cat("  \n###",indClass)
cat("  \n")
subDataSet <- merged_ind_RNAseqEMseq[merged_ind_RNAseqEMseq$Class==indClass,]
head(subDataSet)
??kable
library("datatabe")
library("DT")
kable(dfExample)
library("knitr")
kable(dfExample)
library(ggplot2)
g <- ggplot(mtcars, aes(x=mpg,y=wt,col="red")) + geom_point()
# option 1
g + labs(x="Miles/(US) gallon",y="Weight (1000 lbs)",title="scatter plot")
# option 2
g + xlab("Miles/(US) gallon")+ylab("Weight (1000 lbs)") +
ggtitle("scatter plot")
# option 1
g + labs(x="Miles/(US) gallon",y="Weight (1000 lbs)",title="scatter plot")
# option 2
g + xlab("Miles/(US) gallon")+ylab("Weight (1000 lbs)") +
ggtitle("scatter plot")
library(ggplot2)
g <- ggplot(mtcars, aes(x=mpg,y=wt,col="red")) + geom_point()
# option 1
g + labs(x="Miles/(US) gallon",y="Weight (1000 lbs)",title="scatter plot - option 1")
# option 2
g + xlab("Miles/(US) gallon")+ylab("Weight (1000 lbs)") +
ggtitle("scatter plot - option 2")
# option 1
g + labs(x="Miles/(US) gallon",y="Weight (1000 lbs)",title="scatter plot - option 1")
# option 2
g + xlab("Miles/(US) gallon")+ylab("Weight (1000 lbs)") +
ggtitle("scatter plot - option 2")
library(ggplot2)
g <- ggplot(mtcars, aes(x=mpg,y=wt,col="red")) + geom_point()
# option 1
g + labs(x="Miles/(US) gallon",y="Weight (1000 lbs)",title="scatter plot - option 1")
# option 2
g + xlab("Miles/(US) gallon")+ylab("Weight (1000 lbs)") +
ggtitle("scatter plot - option 2")
library(ggplot2)
ggplot(mtcars, aes(x=mpg,y=wt,col=am))+ geom_point()
library(ggplot2)
ggplot(mtcars, aes(x=mpg,y=wt,col=as.factor(am)))+ geom_point()
allSamples <- c("sample1.txt","sample2.txt","sample3.txt","sample4.txt","sample5.txt","sample5.txt")
testSamples <- c("sample1.txt","sample5.txt")
match(testSamples,allSamples)
testSamples <- c("sample5.txt", "sample1.txt")
match(testSamples,allSamples)
testSamples
# reading in table
episode_df <- read.csv("GoT_dataset/episode_data.csv")
# showing first 6 rows of the data frame
head(episode_df)
# setwd("/Volumes/bioinfomatics$/yfwang/BioinformaticsCore/GitHub/LMS_PlottingInR/course")
setwd("/Users/yfwang/GitHub_project/LMS_Recap4R/course")
# reading in table
episode_df <- read.csv("GoT_dataset/episode_data.csv")
# showing first 6 rows of the data frame
head(episode_df)
# display the internal structure of an R object,
str(episode_df)
# display the internal structure of an R object,
table(episode_df$season)
# change the data type for episode_df$season
episode_df$season <- as.factor(episode_df$season)
# display the internal structure of an R object,
str(episode_df)
# reading in table
episode_df <- read.csv("GoT_dataset/episode_data.csv")
# showing first 6 rows of the data frame
head(episode_df)
# display the internal structure of an R object,
ftable(episode_df$season, episode_df$episode_number)
episode_df$episode_number <- as.factor(episode_df$episode_number)
# display the internal structure of an R object,
ftable(episode_df$season, episode_df$episode_number)
?table
# how many seasons are there
table(episode_df$season)
table(episode_df$episode_number)
sum(table(episode_df$season))
dim(episode_df)
?unique
dim(episode_df)
# show how many episodes for each seasons
table(episode_df$season, episode_df$episode_name)
col2keep <- c("season","episode_number","episode_name")
colnames(episode_df)
keepVec <- colnames(episode_df) %in% col2keep
keepVec
episode_df_Slim <- episode_df[,keepVec]
episode_df_Slim
head(episode_df_Slim)
colnames(episode_df) match col2keep
col2keep <- c("season","episode_number","episode_name")
colnames(episode_df) match col2keep
colnames(episode_df)
?
match
match(colnames(episode_df), col2keep)
match(col2keep,colnames(episode_df))
which(olnames(episode_df) %in% col2keep)
which(colnames(episode_df) %in% col2keep)
keepInx
col2keep <- c("season","episode_number","episode_name")
# use which() function
keepInx <- which(colnames(episode_df) %in% col2keep)
keepInx
keepInx
colnames(episode_df)
colnames(episode_df)
colnames(episode_df)
keepVec
# show last 6 rows of the data frome
tail(episode_df)
grepl("Dragon",episode_df_Slim$episode_name)
grepl("Dark",episode_df_Slim$episode_name)
grepl("Winter",episode_df_Slim$episode_name)
# return logical vector
Logical_dragon <- grepl("Winter",episode_df_Slim$episode_name)
Logical_dragon
episode_df_Slim$Contain.Dragon <- Logical_dragon
## option 1 - using logical vector
episode_df_Slim_Dragon1 <-  episode_df_Slim[episode_df_Slim$Contain.Dragon=="TRUE",]
episode_df_Slim_Dragon1
?gsub
?sub
grepl("Dragon",episode_df_Slim$episode_name)
regexpr("Dragon",episode_df_Slim$episode_name)
head(episode_df_Slim)
oriString <- "Winter Is Coming"
newString1 <- sub(" ",".",oriString)
newString1
newString2 <- gsub(" ",".",oriString)
newString2
# use regular expression
gsub("\\s",".",oriString)
# Chunk 1: setup
#knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_chunk$set(cache = TRUE, warning = FALSE, echo=T,
#                       message = FALSE, cache.lazy = FALSE)
# Chunk 2
# setwd("/Volumes/bioinfomatics$/yfwang/BioinformaticsCore/GitHub/LMS_PlottingInR/course")
setwd("/Users/yfwang/GitHub_project/LMS_Recap4R/course")
# e.g. setwd("~/Downloads/LMS_PlottingInR/course")
# Chunk 4
knitr::include_graphics("figures/GoT.png")
# Chunk 5
# reading in table
episode_df <- read.csv("GoT_dataset/episode_data.csv")
# showing first 6 rows of the data frame
head(episode_df)
# show last 6 rows of the data frome
tail(episode_df)
# Chunk 6
dim(episode_df)
# Chunk 7
# display the internal structure of an R object,
str(episode_df)
# Chunk 8
# change the data type for episode_df$season
episode_df$season <- as.factor(episode_df$season)
# Chunk 9
# how many seasons are there
unique(episode_df$season)
# Chunk 10
# show how many episodes for each seasons
table(episode_df$season)
# Chunk 11
# different options to access the data
head(episode_df$episode_name)
head(episode_df[,"episode_name"])
head(episode_df[,3])
# Chunk 12
col2keep <- c("season","episode_number","episode_name")
colnames(episode_df)
keepVec <- colnames(episode_df) %in% col2keep
keepVec
episode_df_Slim <- episode_df[,keepVec]
head(episode_df_Slim)
# Chunk 13
col2keep <- c("season","episode_number","episode_name")
colnames(episode_df)
# use which() function
keepInx <- which(colnames(episode_df) %in% col2keep)
keepInx
episode_df_SlimInx <- episode_df[,keepInx]
head(episode_df_SlimInx)
# Chunk 14
knitr::include_graphics("./figures/regularExpression.png")
# Chunk 1: setup
#knitr::opts_chunk$set(echo = TRUE)
# knitr::opts_chunk$set(cache = TRUE, warning = FALSE, echo=T,
#                       message = FALSE, cache.lazy = FALSE)
# Chunk 2
# setwd("/Volumes/bioinfomatics$/yfwang/BioinformaticsCore/GitHub/LMS_PlottingInR/course")
setwd("/Users/yfwang/GitHub_project/LMS_Recap4R/course")
# e.g. setwd("~/Downloads/LMS_PlottingInR/course")
# Chunk 4
knitr::include_graphics("figures/GoT.png")
# Chunk 5
# reading in table
episode_df <- read.csv("GoT_dataset/episode_data.csv")
# showing first 6 rows of the data frame
head(episode_df)
# show last 6 rows of the data frome
tail(episode_df)
# Chunk 6
dim(episode_df)
# Chunk 7
# display the internal structure of an R object,
str(episode_df)
# Chunk 8
# change the data type for episode_df$season
episode_df$season <- as.factor(episode_df$season)
# Chunk 9
# how many seasons are there
unique(episode_df$season)
# Chunk 10
# show how many episodes for each seasons
table(episode_df$season)
# Chunk 11
# different options to access the data
head(episode_df$episode_name)
head(episode_df[,"episode_name"])
head(episode_df[,3])
# Chunk 12
col2keep <- c("season","episode_number","episode_name")
colnames(episode_df)
keepVec <- colnames(episode_df) %in% col2keep
keepVec
episode_df_Slim <- episode_df[,keepVec]
head(episode_df_Slim)
# Chunk 13
col2keep <- c("season","episode_number","episode_name")
colnames(episode_df)
# use which() function
keepInx <- which(colnames(episode_df) %in% col2keep)
keepInx
episode_df_SlimInx <- episode_df[,keepInx]
head(episode_df_SlimInx)
# Chunk 14
knitr::include_graphics("./figures/regularExpression.png")
gsub("\\s",".",oriString)
episode_df_Slim$new_episode_name <- gsub("\\s",".",episode_df_Slim$episode_name)
head(episode_df_Slim)
# return logical vector
Logical_dragon <- grepl("Dragon",episode_df_Slim$episode_name)
Logical_dragon
# return indices
Inx_dragon <- grep("Dragon",episode_df_Slim$episode_name)
Inx_dragon
episode_df_Slim$Contain.Dragon <- Logical_dragon
## option 1 - using logical vector
episode_df_Slim_Dragon1 <-  episode_df_Slim[episode_df_Slim$Contain.Dragon=="TRUE",]
episode_df_Slim_Dragon1
## option 2 - using indices
episode_df_Slim_Dragon2 <- episode_df_Slim[Inx_dragon,]
episode_df_Slim_Dragon2
episode_df_Slim$Contain.Dragon=="TRUE"
Logical_dragon
episode_df_Slim[Logical_dragon,]
episode_df_Slim$Contain.Dragon=="TRUE"
sub("\\sDragon"," Dolphin",
episode_df_Slim_Dragon1$episode_name)
